function each(callback)
  for item of this
    callback item
  end
end

case function zip
when (first, second)
  first.map((x, i) => [x, second[i]])
when Array::(second)
  zip this, second
end

case function to_a
when Array::()
  this
when String::()
  Array.from this
when Set::()
  Array.from this
when Object::()
  Object.entries this
end

case function uniq
when Array::()
  new Set(this)::to_a
when Array::(String(key))
  this.filter((x, i) => i === this.findIndex(y => x[key] === y[key]))
when Array::(Function(fn))
  this.filter((x, i) => i === this.findIndex(y => fn(x) === fn(y)))
end
