Spec.new "Html" do |c|
  c.it "h1 inner text" do
    h1 := <h1>inner text...</h1>
    expect(h1.inner_text).to eq("inner text...")
  end

  c.it "child element" do
    class User < Element
      def view(_, _, _)
        <div>
          {props[:name]}
        </div>
      end
    end

    class Main < Element
      def view(_, _, _)
        <div>
          <User name="marcelle" />
        </div>
      end
    end

    expect(Main.new.inner_text).to eq("marcelle ")
  end

  c.it "symbols inside dom node" do
    class Main < Element
      def view(_, _, _)
        <div>
          this is my home page.&yo
        </div>
      end
    end
    expect(Main.new.inner_text).to eq("this is my home page.&yo")
  end

  c.it ":children" do
    class Child < Element
      def view({ children }, _, _)
        <div>
          {children}
        </div>
      end
    end
      
    class Main < Element
      def view(_, _, _)
        <div>
          <Child>
            <span>
              child text
            </span>
          </Child>
        </div>
      end
    end

    expect(Main.new.inner_text).to eq("child text")
  end

  c.it "string interpolation" do
    class Main < Element
      def style(_, _, _) = "
        background: black;
        color: white;
        h1 {
          color: yellow;
        }
      "
      def view(_, _, _,)
        <div name={"ok"}>
          {"interp"}
          oh
          <h1>YELLOW</h1>
        </div>
      end
    end

    expect(Main.new.inner_text).to eq("interp ohYELLOW")
  end

  c.it "if expr" do
    class Main < Element
      def view(_, _, _)
        <div>
          {if true then "ok" end}
        </div>
      end
    end

    expect(Main.new.inner_text).to eq("ok ")
  end
end