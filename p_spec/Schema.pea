Spec.new Schema do |c|
  c.it "schema operator" do
    schema Loading = { loading: true }
    schema LoadingUser = Loading & { id, name }

    user := { loading: true, id: 10, name: "marcelle" }
    LoadingUser(valid_user) := user
    expect(valid_user).to eq(user)
  end
  
  c.it "case expr" do
    val :=
      case [1]
      when [a]
          a
      end
    expect(val).to eq(1)
  end

  c.it "List deconstruction" do
    [{ b: { a } }] := [{ b: { a: 1 } }]
    expect(a).to eq(1)
  end

  c.it "function overloading - record" do
    def f({ a }) = a
    def f([ a ]) = a
    expect(f({ a: 10 })).to eq(10)
  end

  c.it "function overloading - list" do
    def f({ a }) = a
    def f([ a ]) = a
    expect(f([10])).to eq(10)
  end

  c.it "literal nil" do
    def f(nil) = true

    expect(f(nil)).to eq(true)
  end

  c.it "schema lookup deconstruction from function" do
    schema User = { id }

    def f(User({ id })) = id

    expect(f({ id: 10 })).to eq(10)
  end
end
