require "ast"

def parse(str)
  tokens = Lexer::tokenize(str.strip)
  ast = Parser.new(tokens).parse!
  AST::remove_numbers(ast)
end

context "snapshot" do
  it "2021-12-27 21:47:15 -0500" do
    ast = parse("schema Bread = { toasted, type: :white | :whole_wheat }
  from [toasted, type] to { toasted, type }

Bread(b) := [true, :white]
print(b)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "Bread", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "toasted" => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "toasted" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, "type" => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "white" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "whole_wheat" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "or" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "__VALUE" }], :body => [{ :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "__VALUE" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "toasted" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "type" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "toasted", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :assign, :sym => "type", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "toasted" => { :node_type => :identifier_lookup, :sym => "toasted" }, "type" => { :node_type => :identifier_lookup, :sym => "type" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "create_with_constructor" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => true }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "white" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bread" }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => true }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "white" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bread" }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "b", :expr => { :node_type => :identifier_lookup, :sym => "__VALUE" } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "b" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2021-12-27 22:00:20 -0500" do
    ast = parse("schema Point = [x, y]
Point([x, y]) := [1, 2]
print(x, y)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "Point", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "x" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "y" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Point" }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Point" }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "x", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :assign, :sym => "y", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "x" }, { :node_type => :identifier_lookup, :sym => "y" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2021-12-27 22:00:28 -0500" do
    ast = parse("[x, y] := [1, 2]
print(x, y)")
    expect(ast).to ast_eq([{ :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "x" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "y" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "x" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "y" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "x", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :assign, :sym => "y", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "x" }, { :node_type => :identifier_lookup, :sym => "y" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
end
