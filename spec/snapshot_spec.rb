require "ast"

def parse(str)
  tokens = Lexer::tokenize(str.strip)
  ast = Parser.new(tokens).parse!
  AST::remove_numbers(ast)
end

def ast_eq(ast)
  eq(AST::remove_numbers(ast))
end

context "snapshot" do
  it "2022-01-20 15:27:41 -0500" do
    File.write("rspec_child.pea", "
export class Child < Element =
  style _ is_on = \"cursor: pointer;\"
  view = <div>child tests!</div>
".lstrip)
    ast = parse('import { Child } from "./rspec_child"

class Main < Element =
  style _ is_on = "cursor: pointer;"
  view = 
    <div>
      <Child />
    </div>
')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Child", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "_" }, { :node_type => :function_argument, :sym => "is_on" }], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "cursor: pointer;" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "child tests! " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => nil, :column => nil }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "Child" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :identifier_lookup, :sym => "Child" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "pea_module" }, :property => { :node_type => :str_lit, :value => "__unsafe_insert__" } } }, { :node_type => :return, :expr => { :node_type => :identifier_lookup, :sym => "pea_module" } }] } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 9, :value => "Child" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => nil }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Child", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "_" }, { :node_type => :function_argument, :sym => "is_on" }], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "cursor: pointer;" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "child tests! " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => nil, :column => nil }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "Child" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :identifier_lookup, :sym => "Child" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "pea_module" }, :property => { :node_type => :str_lit, :value => "__unsafe_insert__" } } }, { :node_type => :return, :expr => { :node_type => :identifier_lookup, :sym => "pea_module" } }] } } }, { :node_type => :assign, :sym => "Child", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "Child" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" },
property => { :node_type => :str_lit, :value => "new" } } } }] }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "_" }, { :node_type => :function_argument, :sym => "is_on" }], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "cursor: pointer;" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => 6, :column => 7, :args => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => 6, :column => 7, :sym => "Child" }, :line => nil, :column => nil, :property => { :line => 6, :column => 7, :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }])
  end
  it "2022-01-20 15:40:00 -0500" do
    ast = parse("schema Point = [x, y]
Point([x, y]) := [1, 2]
print(x, y)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "Point", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "x" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "y" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Point" }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "x", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :assign, :sym => "y", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "x" }, { :node_type => :identifier_lookup, :sym => "y" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:40:43 -0500" do
    ast = parse("d := <h1></h1>")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "d", :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "h1" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }])
  end
  it "2022-01-20 15:41:15 -0500" do
    ast = parse("val := nil
print(val.nil?())")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "val", :expr => { :node_type => :function_call, :args => [{ :node_type => :nil_lit }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Nil" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "val" }, :property => { :node_type => :str_lit, :value => "nil?" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:41:32 -0500" do
    ast = parse("obj.add
obj.add()")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "obj" }, :property => { :node_type => :str_lit, :value => "add" } } }, { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "obj" }, :property => { :node_type => :str_lit, :value => "add" } } }])
  end
  it "2022-01-20 15:41:47 -0500" do
    ast = parse("obj.add 1, 3")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "obj" }, :property => { :node_type => :str_lit, :value => "add" } } }])
  end
  it "2022-01-20 15:42:03 -0500" do
    ast = parse("num := 5.3
inspect.print num.to_i")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "num", :expr => { :node_type => :function_call, :args => [{ :node_type => :float_lit, :value => 5.3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Float" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "num" }, :property => { :node_type => :str_lit, :value => "to_i" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "inspect" }, :property => { :node_type => :str_lit, :value => "print" } } }])
  end
  it "2022-01-20 15:42:41 -0500" do
    ast = parse('"  ".trim')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "  " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "trim" } } }])
  end
  it "2022-01-20 15:43:01 -0500" do
    ast = parse("print([[:a, 1]].to_r.to_l == [[:a, 1]])")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "to_r" } } }, :property => { :node_type => :str_lit, :value => "to_l" } } }, :property => { :node_type => :str_lit, :value => "__eq__" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:43:50 -0500" do
    ast = parse('class BaseNum val =
  to_s = @val.to_s

class Num < BaseNum =
  to_s_2 = @to_s() + " oh wow"

print(Num::new(3).to_s_2)')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "BaseNum", :super_class => nil, :args => [{ :node_type => :function_argument, :sym => "val" }], :methods => [{ :node_type => :declare, :sym => "to_s", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :instance_lookup, :sym => "val" }, :property => { :node_type => :str_lit, :value => "to_s" } } } }] } }] }, { :node_type => :class, :sym => "Num", :super_class => "BaseNum", :args => [], :methods => [{ :node_type => :declare, :sym => "to_s_2", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => " oh wow" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_lookup, :sym => "to_s" } }, :property => { :node_type => :str_lit, :value => "__plus__" } } } }] } }] }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Num" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "to_s_2" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:44:12 -0500" do
    ast = parse('a := 1

print("oh #{a} #{a + 1}")')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "a" }, :property => { :node_type => :str_lit, :value => "__plus__" } } }, :property => { :node_type => :str_lit, :value => "to_s" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => " " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "a" }, :property => { :node_type => :str_lit, :value => "to_s" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "oh " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "__plus__" } } }, :property => { :node_type => :str_lit, :value => "__plus__" } } }, :property => { :node_type => :str_lit, :value => "__plus__" } } }, :property => { :node_type => :str_lit, :value => "__plus__" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:44:44 -0500" do
    ast = parse("class Test =
  a = 3
  get_arg a = a

class TestB =
  a = 3
  get_method = a

print(
  Test.new.get_arg(3),
  TestB.new.get_method
)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Test", :super_class => nil, :args => [], :methods => [{ :node_type => :declare, :sym => "a", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "get_arg", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "a" }], :body => [{ :node_type => :return, :expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "a" } } } }] } }] }, { :node_type => :class, :sym => "TestB", :super_class => nil, :args => [], :methods => [{ :node_type => :declare, :sym => "a", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "get_method", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "a" } } } }] } }] }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Test" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "get_arg" } } }, { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "TestB" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "get_method" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:45:07 -0500" do
    ast = parse("class Test =
  a = 3
  get_arg a = a
  get_method = a

print(
  Test.new.get_arg(50),
  Test.new.get_method
)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Test", :super_class => nil, :args => [], :methods => [{ :node_type => :declare, :sym => "a", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "get_arg", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "a" }], :body => [{ :node_type => :return, :expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "a" } } } }] } }, { :node_type => :declare, :sym => "get_method", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "a" } } } }] } }] }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 50 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Test" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "get_arg" } } }, { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Test" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "get_method" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:49:52 -0500" do
    ast = parse("class Child < Element =
  view props =
    <div>
      {props[:children]}
    </div>
  
class Main < Element =
  view =
    <Child>
      <span>
        child text
      </span>
    </Child>")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Child", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "props" }], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 3, :column => 14, :value => "children" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 3, :column => 8, :value => "props" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 3, :column => 8, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "props", :line => 3, :column => 8 } } }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "__lookup__" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => nil, :column => nil, :value => "children" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "span" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "child text " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => nil, :column => nil }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Child" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }] }])
  end
  it "2022-01-20 15:51:42 -0500" do
    ast = parse('class Container < Element =
  style = "padding: 5% 20% 0 20%;"
  view = 
    <div>
      Marcelle Rusu
    </div>

class Main < Element =
  style = "
    background: rgb(248, 248, 255);
    width: 100%;
    height: 100%;
    font-family: \'Zen Kaku Gothic Antique\', sans-serif;
  "
  view =
    <div>
      <Container />
    </div>

mount_element(Main, document.getElementById "main".to_js)')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Container", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "padding: 5% 20% 0 20%;" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "Marcelle Rusu " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => nil, :column => nil }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "\n    background: rgb(248, 248, 255);\n    width: 100%;\n    height: 100%;\n    font-family: 'Zen Kaku Gothic Antique', sans-serif;\n  " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => 16, :column => 7, :args => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => 16, :column => 7, :sym => "Container" }, :line => nil, :column => nil, :property => { :line => 16, :column => 7, :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "Main" }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "main" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "to_js" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "document" }, :property => { :node_type => :str_lit, :value => "getElementById" } } }], :expr => { :node_type => :identifier_lookup, :sym => "mount_element" } }])
  end
  it "2022-01-20 15:54:30 -0500" do
    ast = parse('v := {
  [1]: "this is ON",
  [false]: "off",
  sym: 3,
  ["str"]: 3
}
print(v)')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "v", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :int_lit, :line => 1, :column => 4, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Int" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "this is ON" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :bool_lit, :line => 2, :column => 4, :value => false }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Bool" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "off" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 3, :column => 3, :value => "sym" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 4, :column => 4, :value => "str" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "v" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:54:43 -0500" do
    ast = parse("print({a: 3, b: 5}.to_l.to_r)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 7, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 13, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 5 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "to_l" } } }, :property => { :node_type => :str_lit, :value => "to_r" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:55:04 -0500" do
    ast = parse("[{ b: { a } }] := [{ b: { a: 1 } }]
print(a)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 21, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 26, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 3, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 8, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :identifier_lookup, :sym => "a" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 21, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 26, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } }, :property => { :node_type => :str_lit, :value => "__lookup__" } } }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:55:21 -0500" do
    ast = parse("[x, y] := [1, 2]
print(x, y)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :identifier_lookup, :sym => "x" }, { :node_type => :identifier_lookup, :sym => "y" }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "x", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :assign, :sym => "y", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "x" }, { :node_type => :identifier_lookup, :sym => "y" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:55:32 -0500" do
    ast = parse("[a] := [1]
print(a)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :identifier_lookup, :sym => "a" }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:55:45 -0500" do
    ast = parse("[a, b] := [1, :two]
print(a, b)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "two" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :identifier_lookup, :sym => "a" }, { :node_type => :identifier_lookup, :sym => "b" }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "two" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :assign, :sym => "b", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "a" }, { :node_type => :identifier_lookup, :sym => "b" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:55:58 -0500" do
    ast = parse("{a} := {a: 3}
print(a)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 8, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 1, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :identifier_lookup, :sym => "a" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 0, :column => 8, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:56:12 -0500" do
    ast = parse("val := case [1] of
  [a] => a
end

print(val)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "val", :expr => { :node_type => :case, :expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }, :cases => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "match_expr" }], :body => [{ :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "match_expr" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :return, :expr => { :node_type => :identifier_lookup, :sym => "a" } }] }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } } } }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "val" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:56:23 -0500" do
    ast = parse("class Test =
  f a = case a of
    {b} => b
  end

print(Test.new.f {b: 3})")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Test", :super_class => nil, :args => [], :methods => [{ :node_type => :declare, :sym => "f", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "a" }], :body => [{ :node_type => :return, :expr => { :node_type => :case, :expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "a" } } }, :cases => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 2, :column => 6, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => nil }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "match_expr" }], :body => [{ :node_type => :assign, :sym => "b", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "match_expr" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :return, :expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "b" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "b" } } } }] }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } } } }] } }] }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 5, :column => 19, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Test" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "f" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:56:37 -0500" do
    ast = parse('d := <h1 name="hehe">
  testing
  <div> okkhmmmm...</div>
</h1>
document_body.append(d.to_dom)')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "d", :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "h1" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => nil, :column => nil, :value => "name" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 0, :column => 14, :value => "hehe" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "testing " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => nil, :column => nil }, { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "okkhmmmm . . . " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => nil, :column => nil }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => 2, :column => 3 }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "d" }, :property => { :node_type => :str_lit, :value => "to_dom" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "document_body" }, :property => { :node_type => :str_lit, :value => "append" } } }])
  end
  it "2022-01-20 15:56:58 -0500" do
    ast = parse('class Main < Element =
  style = "
    background: black;
    color: white;
    h1 {
      color: yellow;
    }
  "
  view =
    <div name={"ok"}>
      {"interp"}
      oh
      <h1>YELLOW</h1>
    </div>')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "\n    background: black;\n    color: white;\n    h1 {\n      color: yellow;\n    }\n  " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => nil, :column => nil, :value => "name" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 9, :column => 16, :value => "ok" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 10, :column => 8, :value => "interp" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, { :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "oh " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => nil, :column => nil }, { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "h1" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "YELLOW " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => nil, :column => nil }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => 12, :column => 7 }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }])
  end
  it "2022-01-20 15:57:32 -0500" do
    ast = parse("class Child < Element =
  view props =
    <div>
      {props[:children]}
    </div>
  
class Main < Element =
  view =
    <Child children={[<div>test</div>]}/>")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Child", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "props" }], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 3, :column => 14, :value => "children" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 3, :column => 8, :value => "props" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 3, :column => 8, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "props", :line => 3, :column => 8 } } }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "__lookup__" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => nil, :column => nil, :value => "children" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "test " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :line => nil, :column => nil }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Child" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }] }])
  end
  it "2022-01-20 15:57:51 -0500" do
    ast = parse('class User < Element =
  view props =
    <div>
      {props[:name]}
    </div>

class Main < Element =
  view =
    <User name="marcelle" />')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "User", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "props" }], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => 3, :column => 14, :value => "name" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 3, :column => 8, :value => "props" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 3, :column => 8, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "props", :line => 3, :column => 8 } } }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "__lookup__" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => nil, :column => nil, :value => "name" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "marcelle" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "User" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }] }])
  end
  it "2022-01-20 15:58:07 -0500" do
    ast = parse('class Main < Element =
  style = "cursor: pointer;"
  init_state = false
  text val = 
    if val
      return "on"
    else
      return "off"
    end
  view a is_on =
    f := #{@set_state(true)}
    <div onclick={f}>
      {text is_on}
    </div>')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "cursor: pointer;" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "init_state", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => false }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "text", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "val" }], :body => [{ :node_type => :if, :expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "val" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "val" } } }, :pass => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "on" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }], :fail => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "off" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "a" }, { :node_type => :function_argument, :sym => "is_on" }], :body => [{ :node_type => :assign, :sym => "f", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "__ANON_SHORT_ID" }], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => true }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :instance_lookup, :sym => "set_state" } } }] } }, { :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => nil, :column => nil, :value => "onclick" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 11, :column => 19, :value => "f" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 11, :column => 19, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "f", :line => 11, :column => 19 } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => 12, :column => 8, :args => [{ :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 12, :column => 13, :value => "is_on" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 12, :column => 13, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "is_on", :line => 12, :column => 13 } } }], :expr => { :node_type => :instance_method_lookup, :sym => "text", :line => 12, :column => 8 } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }])
  end
  it "2022-01-20 15:58:24 -0500" do
    ast = parse('class Main < Element =
  style = "cursor: pointer;"
  init_state = false
  text val = 
    if val
      return "this is ON"
    else
      return "off"
    end
  view a is_on =
    <div onclick={#{set_state !is_on}}>
      {text is_on}
    </div>')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "cursor: pointer;" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "init_state", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => false }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "text", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "val" }], :body => [{ :node_type => :if, :expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "val" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "val" } } }, :pass => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "this is ON" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }], :fail => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "off" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "a" }, { :node_type => :function_argument, :sym => "is_on" }], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => nil, :column => nil, :value => "onclick" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function, :line => 10, :column => 19, :args => [{ :node_type => :function_argument, :line => 10, :column => 19, :sym => "__ANON_SHORT_ID" }], :body => [{ :node_type => :return, :line => 10, :column => 19, :expr => { :node_type => :function_call, :line => 10, :column => 21, :args => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 10, :column => 32, :value => "is_on" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 10, :column => 32, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "is_on", :line => 10, :column => 32 } } }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "bang" } } }], :expr => { :node_type => :instance_method_lookup, :sym => "set_state", :line => 10, :column => 21 } } }] } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => 11, :column => 8, :args => [{ :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 11, :column => 13, :value => "is_on" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 11, :column => 13, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "is_on", :line => 11, :column => 13 } } }], :expr => { :node_type => :instance_method_lookup, :sym => "text", :line => 11, :column => 8 } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }])
  end
  it "2022-01-20 15:58:45 -0500" do
    ast = parse('class Main < Element =
  style = "cursor: pointer;"
  init_state = false
  text val =
    if val
      "this is ON"
    else
      "off"
    end
  view _ is_on =
    <div onclick=#{set_state !is_on}>
      {text is_on}
    </div>')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "cursor: pointer;" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "init_state", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => false }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "text", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "val" }], :body => [{ :node_type => :if, :expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "val" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "val" } } }, :pass => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "this is ON" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }], :fail => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "off" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "_" }, { :node_type => :function_argument, :sym => "is_on" }], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => nil, :column => nil, :value => "onclick" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function, :line => 10, :column => 18, :args => [{ :node_type => :function_argument, :line => 10, :column => 18, :sym => "__ANON_SHORT_ID" }], :body => [{ :node_type => :return, :line => 10, :column => 18, :expr => { :node_type => :function_call, :line => 10, :column => 20, :args => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 10, :column => 31, :value => "is_on" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 10, :column => 31, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "is_on", :line => 10, :column => 31 } } }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "bang" } } }], :expr => { :node_type => :instance_method_lookup, :sym => "set_state", :line => 10, :column => 20 } } }] } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => 11, :column => 8, :args => [{ :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 11, :column => 13, :value => "is_on" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 11, :column => 13, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "is_on", :line => 11, :column => 13 } } }], :expr => { :node_type => :instance_method_lookup, :sym => "text", :line => 11, :column => 8 } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }])
  end
  it "2022-01-20 15:59:44 -0500" do
    ast = parse('a := "#{if true :result end}"
print(a)')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => true }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "new" } } }, :pass => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "result" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "new" } } } }], :fail => [] }] } }, :property => { :node_type => :str_lit, :value => "to_s" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "__plus__" } } }, :property => { :node_type => :str_lit, :value => "__plus__" } } } }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 15:59:57 -0500" do
    ast = parse('a := "string #{"inside"} outside"
print(a)')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => " outside" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "inside" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "to_s" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "string " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "__plus__" } } }, :property => { :node_type => :str_lit, :value => "__plus__" } } } }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-20 16:00:45 -0500" do
    ast = parse('class Main < Element =
  style _ iss_on = "
    cursor: pointer;
    background: #{if iss_on then "#f00" else "#fff" end};
  "
  init_state = false
  text val = {
    [true]: "this is ON",
    [false]: "off like off"
  }[val]
  view _ is_on =
    <div onclick=#{set_state !is_on}>
      {text is_on}
    </div>')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "pea_module", :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } } }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "_" }, { :node_type => :function_argument, :sym => "iss_on" }], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => ";\n  " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :if, :expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "iss_on" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "iss_on" } } }, :pass => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "#f00" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }], :fail => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "#fff" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } }] }] } }, :property => { :node_type => :str_lit, :value => "to_s" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "\n    cursor: pointer;\n    background: " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "__plus__" } } }, :property => { :node_type => :str_lit, :value => "__plus__" } } } }] } }, { :node_type => :declare, :sym => "init_state", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => false }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "new" } } } }] } }, { :node_type => :declare, :sym => "text", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "val" }], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :naked_or, :lhs => { :node_type => :function_call, :args => [{ :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "val" }], :expr => { :node_type => :identifier_lookup, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :sym => "__try" } }, :rhs => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "val" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :bool_lit, :line => 7, :column => 6, :value => true }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Bool" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "this is ON" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } }, { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :bool_lit, :line => 8, :column => 6, :value => false }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Bool" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "off like off" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "new" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "new" } } }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "_" }, { :node_type => :function_argument, :sym => "is_on" }], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => { { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :symbol, :line => nil, :column => nil, :value => "onclick" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Sym" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } => { :node_type => :function, :line => 11, :column => 18, :args => [{ :node_type => :function_argument, :line => 11, :column => 18, :sym => "__ANON_SHORT_ID" }], :body => [{ :node_type => :return, :line => 11, :column => 18, :expr => { :node_type => :function_call, :line => 11, :column => 20, :args => [{ :node_type => :function_call, :line => nil, :column => nil, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 11, :column => 31, :value => "is_on" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 11, :column => 31, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "is_on", :line => 11, :column => 31 } } }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "bang" } } }], :expr => { :node_type => :instance_method_lookup, :sym => "set_state", :line => 11, :column => 20 } } }] } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => 12, :column => 8, :args => [{ :node_type => :naked_or, :lhs => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :function, :line => nil, :column => nil, :args => [], :body => [{ :node_type => :return, :line => nil, :column => nil, :expr => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 12, :column => 13, :value => "is_on" }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "eval" } } }] }], :expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "__try" } }, :rhs => { :node_type => :function_call, :line => 12, :column => 13, :args => [], :expr => { :node_type => :instance_method_lookup, :sym => "is_on", :line => 12, :column => 13 } } }], :expr => { :node_type => :instance_method_lookup, :sym => "text", :line => 12, :column => 8 } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "new" } } } } }] } }] }])
  end
  it "2022-01-20 23:01:52 -0500" do
    ast = parse('console.log(<div>{[1, 2].map fn x => x * 3}</div>)
')
    expect(ast).to ast_eq([{:node_type=>:assign, :sym=>"pea_module", :expr=>{:node_type=>:function_call, :args=>[{:node_type=>:record_lit, :value=>{}}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :sym=>"Record"}, :property=>{:node_type=>:str_lit, :value=>"new"}}}}, {:node_type=>:function_call, :args=>[{:node_type=>:html_tag, :name=>{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:str_lit, :line=>nil, :column=>nil, :value=>"div"}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"Str"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}, :attributes=>{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:record_lit, :line=>nil, :column=>nil, :value=>{}}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"Record"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}, :children=>{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:array_lit, :line=>nil, :column=>nil, :value=>[{:node_type=>:function_call, :line=>0, :column=>24, :args=>[{:node_type=>:function, :line=>0, :column=>29, :args=>[{:node_type=>:function_argument, :line=>0, :column=>32, :sym=>"x"}], :body=>[{:node_type=>:return, :line=>0, :column=>39, :expr=>{:node_type=>:function_call, :line=>0, :column=>39, :args=>[{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:int_lit, :line=>0, :column=>41, :value=>3}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"Int"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>0, :column=>37, :sym=>"x"}, :line=>0, :column=>42, :property=>{:line=>0, :column=>39, :node_type=>:str_lit, :value=>"__mult__"}}}}]}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:array_lit, :line=>0, :column=>18, :value=>[{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:int_lit, :line=>0, :column=>19, :value=>1}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"Int"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}, {:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:int_lit, :line=>0, :column=>22, :value=>2}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"Int"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}]}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"List"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}, :line=>0, :column=>24, :property=>{:line=>0, :column=>25, :node_type=>:str_lit, :value=>"map"}}}]}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"List"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :sym=>"console"}, :property=>{:node_type=>:str_lit, :value=>"log"}}}])
  end
  it "2022-01-20 23:41:09 -0500" do
    ast = parse('class Test =
  method =
    <div name=#{other_method 1, 2} />
')
    expect(ast).to ast_eq([{:node_type=>:assign, :sym=>"pea_module", :expr=>{:node_type=>:function_call, :args=>[{:node_type=>:record_lit, :value=>{}}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :sym=>"Record"}, :property=>{:node_type=>:str_lit, :value=>"new"}}}}, {:node_type=>:class, :sym=>"Test", :super_class=>nil, :args=>[], :methods=>[{:node_type=>:declare, :sym=>"method", :expr=>{:node_type=>:function, :args=>[], :body=>[{:node_type=>:return, :expr=>{:node_type=>:html_tag, :name=>{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:str_lit, :line=>nil, :column=>nil, :value=>"div"}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"Str"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}, :attributes=>{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:record_lit, :line=>nil, :column=>nil, :value=>{{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:symbol, :line=>nil, :column=>nil, :value=>"name"}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"Sym"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}=>{:node_type=>:function, :line=>2, :column=>15, :args=>[{:node_type=>:function_argument, :line=>2, :column=>15, :sym=>"__ANON_SHORT_ID"}], :body=>[{:node_type=>:return, :line=>2, :column=>15, :expr=>{:node_type=>:function_call, :line=>2, :column=>17, :args=>[{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:int_lit, :line=>2, :column=>30, :value=>1}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"Int"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}, {:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:int_lit, :line=>2, :column=>33, :value=>2}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"Int"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}], :expr=>{:node_type=>:instance_method_lookup, :sym=>"other_method", :line=>2, :column=>17}}}]}}}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"Record"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}, :children=>{:node_type=>:function_call, :line=>nil, :column=>nil, :args=>[{:node_type=>:array_lit, :line=>nil, :column=>nil, :value=>[]}], :expr=>{:node_type=>:property_lookup, :lhs_expr=>{:node_type=>:identifier_lookup, :line=>nil, :column=>nil, :sym=>"List"}, :line=>nil, :column=>nil, :property=>{:line=>nil, :column=>nil, :node_type=>:str_lit, :value=>"new"}}}}}]}}]}])
  end
end