require "ast"

def parse(str)
  tokens = Lexer::tokenize(str.strip)
  ast = Parser.new(tokens).parse!
  AST::remove_numbers(ast)
end

def ast_eq(ast)
  eq(AST::remove_numbers(ast))
end

context "snapshot" do
  it "2021-12-27 21:47:15 -0500" do
    ast = parse("schema Bread = { toasted, type: :white | :whole_wheat }
  from [toasted, type] to { toasted, type }

Bread(b) := [true, :white]
print(b)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "Bread", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "toasted" => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "toasted" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, "type" => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "white" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "whole_wheat" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "or" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "__VALUE" }], :body => [{ :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "__VALUE" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "toasted" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "type" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "toasted", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :assign, :sym => "type", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "toasted" => { :node_type => :identifier_lookup, :sym => "toasted" }, "type" => { :node_type => :identifier_lookup, :sym => "type" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "create_with_constructor" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => true }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "white" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bread" }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => true }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "white" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bread" }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "b", :expr => { :node_type => :identifier_lookup, :sym => "__VALUE" } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "b" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2021-12-27 22:00:20 -0500" do
    ast = parse("schema Point = [x, y]
Point([x, y]) := [1, 2]
print(x, y)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "Point", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "x" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "y" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Point" }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Point" }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "x", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :assign, :sym => "y", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "x" }, { :node_type => :identifier_lookup, :sym => "y" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2021-12-27 22:00:28 -0500" do
    ast = parse("[x, y] := [1, 2]
print(x, y)")
    expect(ast).to ast_eq([{ :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "x" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "y" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 2 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "x" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "y" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "x", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :assign, :sym => "y", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "x" }, { :node_type => :identifier_lookup, :sym => "y" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2021-12-27 23:35:51 -0500" do
    ast = parse("schema Bread = { toasted, type: :white | :whole_wheat }
schema UntoastedBread = Bread & { toasted: false }
schema ToastedBread = Bread & { toasted: true }
  from UntoastedBread({ type }) to { toasted: true, type }

UntoastedBread(untoasted_bread) := { toasted: false, type: :whole_wheat }
ToastedBread(toasted_bread) := untoasted_bread

print(untoasted_bread)
print(toasted_bread)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "Bread", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "toasted" => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "toasted" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, "type" => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "white" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "whole_wheat" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "or" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } } }, { :node_type => :assign, :sym => "UntoastedBread", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "Bread" }, { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "toasted" => { :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => false }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "and" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } } }, { :node_type => :assign, :sym => "ToastedBread", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "Bread" }, { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "toasted" => { :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => true }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "and" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "__VALUE" }], :body => [{ :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "__VALUE" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "UntoastedBread" }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "type", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "type" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "toasted" => { :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => true }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "create" } } }, "type" => { :node_type => :identifier_lookup, :sym => "type" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "create_with_constructor" } } } }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "toasted" => { :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => false }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "create" } } }, "type" => { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "whole_wheat" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "UntoastedBread" }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "toasted" => { :node_type => :function_call, :args => [{ :node_type => :bool_lit, :value => false }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Bool" }, :property => { :node_type => :str_lit, :value => "create" } } }, "type" => { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "whole_wheat" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "UntoastedBread" }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "untoasted_bread", :expr => { :node_type => :identifier_lookup, :sym => "__VALUE" } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "untoasted_bread" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "ToastedBread" }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "untoasted_bread" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "ToastedBread" }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "toasted_bread", :expr => { :node_type => :identifier_lookup, :sym => "__VALUE" } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "untoasted_bread" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "toasted_bread" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-02 13:17:17 -0500" do
    ast = parse("d := <h1></h1>")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "d", :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "h1" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } } } }])
  end
  it "2022-01-02 13:41:55 -0500" do
    ast = parse("val := nil
print(val.nil?())")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "val", :expr => { :node_type => :function_call, :args => [{ :node_type => :nil_lit }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Nil" }, :property => { :node_type => :str_lit, :value => "create" } } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "val" }, :property => { :node_type => :str_lit, :value => "nil?" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-02 17:07:04 -0500" do
    ast = parse("obj.add
obj.add()")
    expect(ast).to ast_eq([{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "obj" }, :property => { :node_type => :str_lit, :value => "add" } } }, { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "obj" }, :property => { :node_type => :str_lit, :value => "add" } } }])
  end
  it "2022-01-02 17:08:01 -0500" do
    ast = parse("obj.add 1, 3
")
    expect(ast).to ast_eq([{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "obj" }, :property => { :node_type => :str_lit, :value => "add" } } }])
  end
  it "2022-01-02 17:19:17 -0500" do
    ast = parse("num := 5.3
inspect.print num.to_i")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "num", :expr => { :node_type => :function_call, :args => [{ :node_type => :float_lit, :value => 5.3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Float" }, :property => { :node_type => :str_lit, :value => "create" } } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "num" }, :property => { :node_type => :str_lit, :value => "to_i" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "inspect" }, :property => { :node_type => :str_lit, :value => "print" } } }])
  end
  it "2022-01-04 21:24:51 -0500" do
    ast = parse('d := <h1 name="hehe">
  testing
  <div> okkhmmmm...</div>
</h1>
documentBody.append(d.to_dom)')
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "d", :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "h1" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => { "name" => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => 0, :column => 14, :value => "hehe" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "testing" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :line => nil, :column => nil }, { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "okkhmmmm . . ." }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :line => nil, :column => nil }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :line => 2, :column => 3 }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "d" }, :property => { :node_type => :str_lit, :value => "to_dom" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "documentBody" }, :property => { :node_type => :str_lit, :value => "append" } } }])
  end
  it "2022-01-05 15:08:01 -0500" do
    ast = parse('"  ".trim')
    expect(ast).to ast_eq([{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "  " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } }, :property => { :node_type => :str_lit, :value => "trim" } } }])
  end
  it "2022-01-05 15:34:50 -0500" do
    ast = parse("print({a: 3, b: 5}.to_a[0])")
    expect(ast).to ast_eq([{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "a" => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, "b" => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 5 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }, :property => { :node_type => :str_lit, :value => "to_a" } } }, :property => { :node_type => :str_lit, :value => "__lookup__" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-05 16:45:24 -0500" do
    ast = parse("print([[:a, 1]].to_r.to_l == [[:a, 1]])")
    expect(ast).to ast_eq([{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }, :property => { :node_type => :str_lit, :value => "to_r" } } }, :property => { :node_type => :str_lit, :value => "to_l" } } }, :property => { :node_type => :str_lit, :value => "__eq__" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-05 20:31:41 -0500" do
    ast = parse('class BaseNum val =
  to_s = @val.to_s

class Num < BaseNum =
  to_s_2 = @to_s() + " oh wow"

print(Num::create(3).to_s_2)')
    expect(ast).to ast_eq([{ :node_type => :class, :sym => "BaseNum", :super_class => nil, :args => [{ :node_type => :function_argument, :sym => "val" }], :methods => [{ :node_type => :declare, :sym => "to_s", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :instance_lookup, :sym => "val" }, :property => { :node_type => :str_lit, :value => "to_s" } } } }] } }] }, { :node_type => :class, :sym => "Num", :super_class => "BaseNum", :args => [], :methods => [{ :node_type => :declare, :sym => "to_s_2", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => " oh wow" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [], :expr => { :node_type => :instance_lookup, :sym => "to_s" } }, :property => { :node_type => :str_lit, :value => "__plus__" } } } }] } }] }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Num" }, :property => { :node_type => :str_lit, :value => "create" } } }, :property => { :node_type => :str_lit, :value => "to_s_2" } } }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-05 21:14:06 -0500" do
    ast = parse("[a] := [1]")
    expect(ast).to ast_eq([{ :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }])
  end
  it "2022-01-05 21:18:51 -0500" do
    ast = parse("[a, b] := [1, :two]
print(a, b)")
    expect(ast).to ast_eq([{ :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "two" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }, { :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "two" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }, { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :assign, :sym => "b", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "a" }, { :node_type => :identifier_lookup, :sym => "b" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-06 13:09:34 -0500" do
    ast = parse("[{ b: { a } }] := [{ b: { a: 1 } }]
print(a)")
    expect(ast).to ast_eq([{ :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "b" => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "a" => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :record_lit, :value => { "b" => { :node_type => :record_lit, :value => { "a" => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } } } } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "b" => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "a" => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :record_lit, :value => { "b" => { :node_type => :record_lit, :value => { "a" => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } } } } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "b" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } }, :property => { :node_type => :str_lit, :value => "__lookup__" } } }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-06 13:10:14 -0500" do
    ast = parse("{a} := {a: 3}
print(a)")
    expect(ast).to ast_eq([{ :node_type => :if, :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "a" => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "a" => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "valid_q" } } }, :pass => [{ :node_type => :assign, :sym => "__VALUE", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "a" => { :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 3 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Record" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :function_call, :args => [{ :node_type => :record_lit, :value => { "a" => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, :property => { :node_type => :str_lit, :value => "construct" } } } }, { :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "__VALUE" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }], :fail => [{ :node_type => :throw, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "Match error" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "a" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-06 13:11:20 -0500" do
    ast = parse("val := case [1] of
  [a] => a
end

print(val)")
    expect(ast).to ast_eq([{ :node_type => :assign, :sym => "val", :expr => { :node_type => :case, :expr => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 1 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }, :cases => { :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :array_lit, :value => [{ :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :symbol, :value => "a" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Sym" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "any" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Schema" }, :property => { :node_type => :str_lit, :value => "for" } } }, { :node_type => :function, :args => [{ :node_type => :function_argument, :sym => "match_expr" }], :body => [{ :node_type => :assign, :sym => "a", :expr => { :node_type => :function_call, :args => [{ :node_type => :function_call, :args => [{ :node_type => :int_lit, :value => 0 }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Int" }, :property => { :node_type => :str_lit, :value => "create" } } }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "match_expr" }, :property => { :node_type => :str_lit, :value => "__lookup__" } } } }, { :node_type => :return, :expr => { :node_type => :identifier_lookup, :sym => "a" } }] }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "List" }, :property => { :node_type => :str_lit, :value => "create" } } } } }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "val" }], :expr => { :node_type => :identifier_lookup, :sym => "print" } }])
  end
  it "2022-01-07 15:16:50 -0500" do
    ast = parse('class Container < Element =
  style = "padding: 5% 20% 0 20%"
  view = 
    <div>
      Marcel Rusu
    </div>

class Main < Element =
  style = "
    background: rgb(248, 248, 255);
    width: 100%;
    height: 100%;
    font-family: \'Zen Kaku Gothic Antique\', sans-serif;
  "
  view =
    <div>
      <Container />
    </div>

mount_element(Main, documentBody)')
    expect(ast).to ast_eq([{ :node_type => :class, :sym => "Container", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "padding: 5% 20% 0 20%" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :html_text_node, :value => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "Marcel Rusu" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :line => nil, :column => nil }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } } } }] } }] }, { :node_type => :class, :sym => "Main", :super_class => "Element", :args => [], :methods => [{ :node_type => :declare, :sym => "style", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :function_call, :args => [{ :node_type => :str_lit, :value => "\n    background: rgb(248, 248, 255);\n    width: 100%;\n    height: 100%;\n    font-family: 'Zen Kaku Gothic Antique', sans-serif;\n  " }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :sym => "Str" }, :property => { :node_type => :str_lit, :value => "create" } } } }] } }, { :node_type => :declare, :sym => "view", :expr => { :node_type => :function, :args => [], :body => [{ :node_type => :return, :expr => { :node_type => :html_tag, :name => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :str_lit, :line => nil, :column => nil, :value => "div" }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Str" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :attributes => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :record_lit, :line => nil, :column => nil, :value => {} }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "Record" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } }, :children => { :node_type => :function_call, :line => nil, :column => nil, :args => [{ :node_type => :array_lit, :line => nil, :column => nil, :value => [{ :node_type => :function_call, :line => 16, :column => 7, :args => [], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => 16, :column => 7, :sym => "Container" }, :line => nil, :column => nil, :property => { :line => 16, :column => 7, :node_type => :str_lit, :value => "create" } } }] }], :expr => { :node_type => :property_lookup, :lhs_expr => { :node_type => :identifier_lookup, :line => nil, :column => nil, :sym => "List" }, :line => nil, :column => nil, :property => { :line => nil, :column => nil, :node_type => :str_lit, :value => "create" } } } } }] } }] }, { :node_type => :function_call, :args => [{ :node_type => :identifier_lookup, :sym => "Main" }, { :node_type => :identifier_lookup, :sym => "documentBody" }], :expr => { :node_type => :identifier_lookup, :sym => "mount_element" } }])
  end
end
